// Firestore Security Rules for PEEV (Team-Based)
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user belongs to a team
    function isTeamMember(teamId) {
      return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members;
    }
    
    function signedIn() { 
      return request.auth != null; 
    }
    
    // Team-scoped collections
    match /productCategories/{id} {
      allow read, write: if signedIn() && isTeamMember(resource.data.teamId);
      allow create: if signedIn() && isTeamMember(request.resource.data.teamId);
    }
    
    match /products/{id} {
      allow read, write: if signedIn() && isTeamMember(resource.data.teamId);
      allow create: if signedIn() && isTeamMember(request.resource.data.teamId);
    }
    
    match /inventory/{id} {
      allow read, write: if signedIn() && isTeamMember(resource.data.teamId);
      allow create: if signedIn() && isTeamMember(request.resource.data.teamId);
    }
    
    match /transactions/{id} {
      allow read, write: if signedIn() && isTeamMember(resource.data.teamId);
      allow create: if signedIn() && isTeamMember(request.resource.data.teamId);
    }
    
    match /saleItems/{id} {
      allow read, write: if signedIn() && isTeamMember(resource.data.teamId);
      allow create: if signedIn() && isTeamMember(request.resource.data.teamId);
    }
    
    // Legacy sales collection (team-based)
    match /sales/{id} {
      allow read, write: if signedIn() && isTeamMember(resource.data.teamId);
      allow create: if signedIn() && isTeamMember(request.resource.data.teamId);
    }
    
    // Teams collection - members can read and update (for invitations)
    match /teams/{teamId} {
      allow read: if signedIn() && isTeamMember(teamId);
      allow create: if signedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if signedIn() && isTeamMember(teamId);  // Any team member can update (for invitations)
    }
    
    // User profiles - enhanced permissions for team management
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if signedIn() && request.auth.uid == userId;
      allow create: if signedIn() && request.auth.uid == userId;
      
      // Team members can read other users (for finding by email) and update them (for invitations)
      allow read: if signedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          // Current user has a team (can read others for invitations)
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAll(['teamId']) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId != null
        );
      
      allow write: if signedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          // Current user has a team and can invite others
          (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAll(['teamId']) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId != null &&
           (
             // Can update if adding user to same team
             request.resource.data.teamId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId ||
             // Can update if target user doesn't have a team yet
             (!exists(/databases/$(database)/documents/users/$(userId)) || 
              !resource.data.keys().hasAll(['teamId']) || 
              resource.data.teamId == null)
           ))
        );
    }
  }
}
